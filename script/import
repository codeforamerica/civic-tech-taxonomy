#!/usr/bin/env node

const Repository = require('gitsheets/lib/Repository');
const { TreeObject } = require('gitsheets/lib/hologit');
const axios = require('axios');
const csvParser = require('csv-parser');
const ProgressBar = require('progress');

const EMPTY_TREE_HASH = TreeObject.getEmptyTreeHash();

require('yargs')
    .command({
        command: '$0 <source-type> [source]',
        desc: 'Import taxonomy data from a source',
        builder: {
            sourceType: {
                describe: 'Type of source being imported',
                choices: ['laddr', 'matchmaker', 'democracylab']
            },
            source: {
                describe: 'Host/URL for source. Format varies by source_type'
            },
            'commit-to': {
                describe: 'A target branch/ref to commit the imported tree to',
                type: 'string'
            },
            'commit-message': {
                describe: 'A commit message to use if commit-branch is specified',
                type: 'string'
            },
        },
        handler: async argv => {
            const { commitTo, commitMessage, sourceType, source } = argv;

            // open target repo
            let repo = await Repository.getFromEnvironment({ ref: commitTo });
            let git = await repo.getGit();
            let ancestorCommit = await repo.resolveRef();

            if (!ancestorCommit) {
                // initialize ref
                ancestorCommit = await git.commitTree(EMPTY_TREE_HASH, {
                    m: `↥ initialize gitsheets workspace ${commitTo}`
                });
                repo = await Repository.getFromEnvironment({ ref: ancestorCommit });
                git = await repo.getGit();
            }

            // run importer against provided repo
            try {
                await importTaxonomy(repo, argv);
                console.error('sheets imported');
            } catch (err) {
                console.error('failed to import taxonomy:', err);
                process.exit(1);
            }

            // write tree
            const workspace = await repo.getWorkspace();
            const treeHash = await workspace.root.write();

            // commit results
            if (commitTo) {
                const commitRef = commitTo == 'HEAD' || commitTo.startsWith('refs/')
                    ? commitTo
                    : `refs/heads/${commitTo}`;

                if (treeHash !== await git.getTreeHash(ancestorCommit)) {
                    const commitHash = await git.commitTree(treeHash, {
                        p: ancestorCommit,
                        m: commitMessage || `🔁 imported ${sourceType}${source ? ' from '+source : ''}`
                    });
                    await git.updateRef(commitRef, commitHash);
                    console.log(`committed new tree to "${commitRef}": ${ancestorCommit}->${commitHash}`);
                    console.log(commitHash);
                } else {
                    console.log('tree unchanged');
                }
            } else {
                console.log(treeHash);
            }
        }
    })
    .demandCommand()
    .help()
    .argv;

async function importTaxonomy(repo, argv) {
    if (argv.sourceType == 'laddr') {
        await importLaddr(repo, argv);
    } else if (argv.sourceType == 'matchmaker') {
        await importMatchmaker(repo, argv);
    } else if (argv.sourceType == 'democracylab') {
        await importDemocracyLab(repo, argv);
    } else {
        throw new Error('Unsupported source type');
    }
}

async function importLaddr(repo, { source }) {
    const { data: { data } } = await axios.get(`http://${source}/tags`, { params: { format: 'json' } });
    const tagsByPrefix = {};


    // load and organize tags
    let tagsCount = 0;
    for (const { Handle, Title } of data ) {
        const [prefix, tag] = Handle.split('.', 2);

        if (!tag) {
            console.warn(`skipping unprefixed tag: ${Handle}`);
            continue;
        } else if (prefix == 'event') {
            // silently skip event tags
            continue;
        } else if (prefix != 'tech' && prefix != 'topic') {
            console.warn(`skipping unhandled tag prefix: ${prefix}`);
            continue;
        }

        if (!tagsByPrefix[prefix]) {
            tagsByPrefix[prefix] = {};
        }

        tagsByPrefix[prefix][tag] = {
            id: tag,
            display_name: Title
        };
        tagsCount++;
    }


    // load into sheets
    const sheets = await repo.openSheets();
    const progressBar = new ProgressBar('building tree :percent [:bar] :rate/s :etas', { total: tagsCount });

    for (const prefix in tagsByPrefix) {
        // define sheet if needed
        if (!sheets[prefix]) {
            sheets[prefix] = await repo.openSheet(prefix, {
              config: {
                  root: prefix,
                  path: '${{ id }}'
              }
            });
            await sheets[prefix].writeConfig();
        }

        // upsert each tag
        const tags = tagsByPrefix[prefix];

        for (const tag in tags) {
            await sheets[prefix].upsert(tags[tag]);
            progressBar.tick();
        }
    }
}

async function importMatchmaker(repo, { source=null }) {

    // open sheet
    const sheets = await repo.openSheets();

    if (!sheets.tags) {
        sheets.tags = await repo.openSheet('tags', {
          config: {
              root: '.',
              path: '${{ tag/** }}'
          }
        })
        await sheets.tags.writeConfig()
    }

    // load tags
    if (!source) {
        source = 'https://github.com/designforsf/brigade-matchmaker/files/2563599/all_json.txt';
    }

    const { data } = await axios.get(source);

    // load tags into sheets
    const progressBar = new ProgressBar('building tree :percent [:bar] :rate/s :etas', { total: Object.keys(data).length });

    for (const tag in data) {
        await sheets.tags.upsert({
            ...data[tag],
            tag,
            class_name: null
        });
        progressBar.tick();
    }
}

async function importDemocracyLab(repo, { source=null }) {

    // open sheet
    const sheets = await repo.openSheets();

    if (!sheets.tags) {
        sheets.tags = await repo.openSheet('tags', {
          config: {
              root: '.',
              path: '${{ category }}/${{ canonical_name }}'
          }
        })
        await sheets.tags.writeConfig()
    }

    // load tags
    if (!source) {
        source = 'https://raw.githubusercontent.com/DemocracyLab/CivicTechExchange/master/common/models/Tag_definitions.csv';
    }

    console.warn(`downloading ${source}`);
    const response = await axios.get(source, { responseType: 'stream' });

    return new Promise ((resolve, reject) => {
        const tags = [];

        // read all tags
        response.data
            .pipe(csvParser())
            .on('data', async (row) => {
                const tagData = {};

                for (const columnName in row) {
                    const fieldName = columnName
                        .replace(/\s*\(.*$/, '')
                        .replace(/\s+/, '_')
                        .toLowerCase();

                    tagData[fieldName] = row[columnName];
                }

                tags.push(tagData);
            })
            .on('end', async () => {

                // build tree
                const progressBar = new ProgressBar('building tree :percent [:bar] :rate/s :etas', { total: tags.length });

                for (const tagData of tags) {
                    const category = tagData.category
                        .replace(/\s+/, '-')
                        .replace(/\(s\)/, 's')
                        .toLowerCase();

                    await sheets.tags.upsert({
                        ...tagData,
                        category,
                        parent: tagData.parent || null,
                        subcategory: tagData.subcategory || null,
                        caption: tagData.caption || null
                    });

                    progressBar.tick();
                }

                resolve();

            })
            .on('error', reject)
    });
}
